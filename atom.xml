<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>朝闻夕拾</title>
 <link href="http://hellohtml5.com/atom.xml" rel="self"/>
 <link href="http://hellohtml5.com/"/>
 <updated>2021-07-01T14:52:42+08:00</updated>
 <id>http://hellohtml5.com</id>
 <author>
   <name>Mark Otto</name>
   <email>markdotto@gmail.com</email>
 </author>

 
 <entry>
   <title>不吹不擂，一文看懂鸿蒙</title>
   <link href="http://hellohtml5.com/2021/07/01/harmonyos_investigation/"/>
   <updated>2021-07-01T00:00:00+08:00</updated>
   <id>http://hellohtml5.com/2021/07/01/harmonyos_investigation</id>
   <content type="html">&lt;p&gt;导语：华为鸿蒙OS是否Android套皮，有什么创新，是否自主研发完全开源，本文带你深入鸿蒙的世界。&lt;/p&gt;

&lt;p&gt;（阅读本文大约耗时20分钟。)&lt;/p&gt;

&lt;h1 id=&quot;一初识鸿蒙&quot;&gt;一、初识鸿蒙&lt;/h1&gt;

&lt;p&gt;中国在计算机基础核心领域缺乏建树，更一直没有自主知识产权的操作系统。之前又出过多起诸如&lt;a href=&quot;https://zh.wikipedia.org/zh-hk/汉芯&quot;&gt;汉芯&lt;/a&gt;，&lt;a href=&quot;https://zh.wikipedia.org/wiki/红芯浏览器&quot;&gt;红芯浏览器&lt;/a&gt;等造假事件，犹如现实世界的“狼来了”，使国人对任何打着自主知识产权宣传的产品都会戴着放大镜去看。那么鸿蒙到底是不是个例外。&lt;/p&gt;

&lt;p&gt;鸿蒙是个很泛的概念，鸿蒙不仅一个操作系统，还是一个生态。鸿蒙这个词在不同的场景下指代不同的东西。根据华为官方IDE&lt;a href=&quot;https://developer.huawei.com/consumer/cn/deveco_studio&quot;&gt; DevEco Studio &lt;/a&gt;的应用模板可以看出，目前鸿蒙支持的设备有手机，平板，电视，手表，汽车，以及相机等小家电等等，不同的技术栈开发的应用支持的设备种类也不同。其中Java类型的应用支持的设备类型最为丰富，JS类型的应用其次，C++应用支持的类型最少。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_template.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这些设备大体上可以分为嵌入式和非嵌入式两种。根据应用所需内存大小又可以分为L0-L5六个级别&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/device_level.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在嵌入式领域，&lt;/strong&gt;鸿蒙指是一款嵌入式操作系统，鸿蒙的核心为LiteOS，系统只能在配套的硬件（开发板）上运行，并非通用的操作系统，OpenHarmony是其对外开源的版本，在2020年9月在gitee上开源OpenHarmony 1.0，关于这款系统华为自身的文档比较欠缺，这里有较为详细的&lt;a href=&quot;https://www.bookstack.cn/read/openharmony-1.0-zh-cn/Readme-CN.md&quot;&gt;开发者文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在非嵌入式领域，&lt;/strong&gt;鸿蒙指的是一款叫鸿蒙的手机操作系统，最近网上热议的&lt;a href=&quot;https://www.zhihu.com/question/435444581&quot;&gt;“此应用专为旧版鸿蒙打造”&lt;/a&gt;令人疑窦丛生。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/old_harmony.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;因为截至目前鸿蒙只发布了一个版本，根本不存在所谓的旧版鸿蒙。由于鸿蒙的手机版操作系统并未开源，提示语又与android如此类似，不得不令人怀疑是字符串批量替换。那么事实真是字符串替换如此简单吗？下文将会予以分析。&lt;/p&gt;

&lt;p&gt;总的来说，鸿蒙绝不仅仅指的是操作系统，华为的野心也绝不止于此，华为是要打造一个叫鸿蒙的生态，我们不排除未来会有鸿蒙SDK植入其它厂商的设备，使这些设备也具备运行鸿蒙应用的能力，甚至是运行在传统的Windows、Linux上的设备，那么这些设备也可以说是一个鸿蒙设备，是鸿蒙生态的一部分。&lt;/p&gt;

&lt;h1 id=&quot;二鸿蒙核心&quot;&gt;二、鸿蒙核心&lt;/h1&gt;

&lt;p&gt;鸿蒙生态的核心是以下四点&lt;/p&gt;

&lt;h2 id=&quot;1多设备兼容&quot;&gt;1、多设备兼容&lt;/h2&gt;

&lt;p&gt;即开发出来的应用，可以覆盖多种类型的设备，屏蔽底层OS的差异，类似目前火热的&lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;所解决的问题。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/device_compatibility.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;2卡片式应用&quot;&gt;2、卡片式应用&lt;/h2&gt;

&lt;p&gt;在多设备兼容的基础上带来一致的，高性能的交互体验。可以理解为跨设备，跨平台，跨网络的轻量Widget。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/card_ui.png&quot; /&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/card_ui_2.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;3软总线&quot;&gt;3、软总线&lt;/h2&gt;

&lt;p&gt;在以上两点的基础上，降低设备间互联互通的门槛。主要基于以下三点改进&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;传统设备&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;鸿蒙设备&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;设备间的发现和连接&lt;/td&gt;
      &lt;td&gt;手动扫描发现&lt;/td&gt;
      &lt;td&gt;自动发现&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;设备间组网通信&lt;/td&gt;
      &lt;td&gt;蓝牙、WiFi不互通，各自组网，无法直接通信&lt;/td&gt;
      &lt;td&gt;异构组网&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据传输协议&lt;/td&gt;
      &lt;td&gt;无统一规范标准&lt;/td&gt;
      &lt;td&gt;统一极简协议&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;（1）设备间的发现和连接：从手动发现，进化成自发现&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_1.jpg&quot; /&gt;&lt;/div&gt;

&lt;p&gt;（2）多设备互联后的组网技术：软总线组网-异构网络组网&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;（3）多设备多协议间的高效传输技术&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_3.jpg&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;4通信安全&quot;&gt;4、通信安全&lt;/h2&gt;

&lt;p&gt;要实现设备间的互联互通，那么安全无疑是特别重要的环节。这里的问题是如何保证正确的人使用正确的设备，消费正确的数据。即要解决如下三个问题：&lt;/p&gt;

&lt;p&gt;（1）如何保证消费者对设备的鉴权是安全的，保证设备是原厂生产，没有被篡改的？（正确的设备）&lt;br /&gt;
（2）如何保证消费者操作设备数据是安全的？ (正确的人)&lt;br /&gt;
（3）如何保证消费者数据安全?（正确使用数据）&lt;/p&gt;

&lt;p&gt;鸿蒙在系统和数据通信安全方面有较为完善的考虑。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/security.png&quot; /&gt;&lt;/div&gt;

&lt;h1 id=&quot;三系统层分析&quot;&gt;三、系统层分析&lt;/h1&gt;

&lt;p&gt;基于鸿蒙已经开源的&lt;a href=&quot;https://gitee.com/openharmony&quot;&gt;openharmony&lt;/a&gt;源码统计，openharmony包含C代码2KW行，C++ 500W行。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/code_statistics.png&quot; /&gt;&lt;/div&gt;

&lt;h2 id=&quot;1内核部分&quot;&gt;1、内核部分&lt;/h2&gt;

&lt;p&gt;鸿蒙宣传的微内核，并未说明是哪个鸿蒙，华为目前已经发布的内核包括：&lt;br /&gt;
1、Linux 面向手机 (L5级别设备)&lt;br /&gt;
2、LiteOS-a 面向有MMU的设备 (&amp;gt;=L1级别) &lt;br /&gt;
3、LiteOS-m 面向无MMU的嵌入式设备 (L0级别)&lt;/p&gt;

&lt;p&gt;目前行业内对内核进行分类主要是：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;内核类型&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;操作系统代表&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;宏内核（单内核）&lt;/td&gt;
      &lt;td&gt;Linux、BSD Unix、LiteOS-A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;微内核&lt;/td&gt;
      &lt;td&gt;MiniX、L4、QNX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;混合内核&lt;/td&gt;
      &lt;td&gt;Windows、MacOS X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;外内核（是一种极简微内核）&lt;/td&gt;
      &lt;td&gt;主要是学术性研究，例如：MIT Aegis&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/kernel_type.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;微内核的优点：&lt;br /&gt;
1、代码量小，可以形式化验证，可以减少bug量，几乎可以0 bug，另外更加方便移植。&lt;br /&gt;
2、各个系统组件或者服务如果存在问题可以直接重启服务，减少核心组件异常对整个系统的破坏，并按需组织系统服务。&lt;br /&gt;
3、各组件可以按需加载（现在宏内核也支持模块动态加载卸载）。&lt;br /&gt;
4、可以规避GPL协议。&lt;/p&gt;

&lt;p&gt;微内核缺点：&lt;br /&gt;
1、所有资源获取都需要通过IPC，IPC又必须陷入内核，所以会导致频繁的陷入内核，或者多次拷贝，导致性能下降。当然IPC通信效率随着深入研究与技术发展逐步提高。&lt;br /&gt;
2、对于中断响应，需要映射到用户空间再处理，效率较低。&lt;br /&gt;
3、大量使用某些系统服务的时候，会导致进程上下文切换，增加系统负担。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/kernel_type_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;而目前开源出来的鸿蒙代码 LiteOS-a按照业界对内核分类依旧是宏内核。至于华为是否存在微内核但没有开源，还是在实现鸿蒙过程中，又重新选择了宏内核，我们不得而知。&lt;/p&gt;

&lt;h3 id=&quot;11-liteos-m&quot;&gt;1.1 LiteOS-M&lt;/h3&gt;

&lt;p&gt;LiteOS-M和HW以前开源的Lite OS基本相同，进行部分结构性调整，当前只适用于cortex-m3、cortex-m4、cortex-m7、risc-v芯片架构，是纯粹的RTOS系统，通过KAL与上层服务匹配。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/liteos_m.png&quot; /&gt;&lt;/div&gt;

&lt;h3 id=&quot;12-liteos-a&quot;&gt;1.2 LiteOS-A&lt;/h3&gt;

&lt;p&gt;LiteOS-A是HW基于LiteOS进行演进的，进行 多进程，多核，虚拟内存，IPC等重新封装，尽量类似于Linux，但是尽量简化内核实现。OpenHarmony LiteOS-A内核架构图&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/liteos_a.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;LiteOS-A是HW基于LiteOS进行演进的，进行 多进程，多核，虚拟内存，IPC等重新封装，尽量类似于Linux，但是尽量简化内核实现。&lt;/p&gt;

&lt;p&gt;LiteOS-A相对于纯粹的RTOS增强关键特性简介：&lt;br /&gt;
&lt;strong&gt;多进程：&lt;/strong&gt;基于task进行封装，较为简单的进程与线程调度（支持时间片和FIFO调度）；&lt;br /&gt;
&lt;strong&gt;多核：&lt;/strong&gt;全局链表、所有CPU共享，支持空闲轮询调度（不支持负载均衡），可支持亲和设置，可绑定核运行。&lt;br /&gt;
&lt;strong&gt;虚拟内存&lt;/strong&gt;：内核静态映射，静态映射提升虚实转换效率，最有区间分布（０－１G用户空间，１－４G内核空间，减少用户态进程页表项），用户态通过缺页异常按需获取内存。&lt;br /&gt;
&lt;strong&gt;动态链接：&lt;/strong&gt;按需加载，多应用共享代码段，加载最小单元为页，符号绑定，支持立即和延时绑定，加载地址随机化，进程代码段，数据段，堆栈段地址随机化。并且运行标准ELF文件。&lt;br /&gt;
&lt;strong&gt;进程通信（IPC）：&lt;/strong&gt;支持标准的posix进程间通信，如Mqueue,pipe,fifo.signal。同时添加了Lite IPC（类似与Android binder但是简单得多），ROM和RAM占用不超过30K，达到轻量，基于白名单控制的服务访问权限，提升安全，通过内存映射实现单次拷贝，实现高效。&lt;br /&gt;
&lt;strong&gt;系统调用：&lt;/strong&gt;通过MUSL实现系统调用支持syscall API和VDSO API。VDSO是减少系统调用开销的方式，Linux也支持。保证服务与内核分离。并且服务和应用不能随意访问内核。&lt;br /&gt;
&lt;strong&gt;权限管理：&lt;/strong&gt;进程粒度的权限划分与管理，完成DAC访问控制，以进程UID的配置，灵活划分文件资源归属与管控，提供UGO（user,group,other）的权限分配，满足基本的文件共享需求和Posix规范。&lt;br /&gt;
&lt;strong&gt;虚拟文件系统：&lt;/strong&gt;VFS管理根目录，挂载点内目录有FS管理。通过BCache和PCache提升文件系统读写速度。&lt;br /&gt;
&lt;strong&gt;POSIX标准库：&lt;/strong&gt;基于Musl C的posix标准库，当前支持1000+的标准Posix接口。用户态使用全量Musl，C++使用libC++，内核使用部分Musl。&lt;br /&gt;
以上特性都基本上基于Linux的简化版本，保持内核小型化，并且尽量拥有Linux的功能特性。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;业界RTOS方案&lt;/td&gt;
      &lt;td&gt;1、内存占用小&lt;br /&gt;2、启动速度快&lt;br /&gt;3、实时性高&lt;/td&gt;
      &lt;td&gt;1、生态不完善，移植第三方库和驱动复杂工作量较大&lt;br /&gt;2、应用和内核不能隔离，应用代码异常容易引发内核挂死。应用和产品无法解耦。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Linux方案&lt;/td&gt;
      &lt;td&gt;1、生态完善&lt;br /&gt;2、开发方便，应用与内核隔离，应用安全，可支持复杂的交互体验。&lt;/td&gt;
      &lt;td&gt;1、内存占用大&lt;br /&gt;2、启动速度慢&lt;br /&gt;3、实时性稍弱&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;LiteOS-A（鸿蒙方案）设计目标：&lt;br /&gt;
 1、生态软件兼容：支持1000+的Posix接口复用GNU/Linux生态。&lt;br /&gt;
 2、内核机制增强：增加多进程，虚拟内存，系统调用，实现应用与应用隔离，内核与应用隔离，VFS虚拟文件系统等。支持复杂交互体验设备开发。&lt;br /&gt;
 3、生态器件统一：使用HDF统一驱动开发。&lt;/p&gt;

&lt;h3 id=&quot;13-linux&quot;&gt;1.3 Linux&lt;/h3&gt;

&lt;p&gt;鸿蒙OS Linux内核基于Linux 4.19版本内核，添加如下功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CVE补丁&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补丁所涉及的CVE(Common Vulnerabilities and Exposures)安全漏洞是通过NVD (https://nvd.nist.gov/)官方机构收集，且补丁已经进入LTS 4.19.y分支或主线，主要涉及存储(btrfs/scsi/)、网络(net/bpf/mwifiex) 、驱动(xen/nfc)，对应CVE列表参考commit信息中CVE字段信息。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenHarmony特性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HDF驱动、binder ipc转发功能等特性支持。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;特定芯片架构驱动补丁（比如Hi3516DV300）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vendor厂商提供的特定芯片架构驱动代码：&lt;/p&gt;

&lt;p&gt;hisi_linux-4.19_hos_l2.patch: 在Hi3516DV300芯片上支持arm架构的内核启动（DTS等）及对应的drm/mmc等驱动的支持。&lt;/p&gt;

&lt;h2 id=&quot;2子系统&quot;&gt;2、子系统&lt;/h2&gt;

&lt;p&gt;openharmony LiteOS-A包含如下子系统：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统基本能力子系统集：为分布式应用在多设备上的运行、调度、迁移等操作提供了基础能力，由分布式软总线、分布式数据管理、分布式任务调度、公共基础库、多模输入、图形、安全、AI等子系统组成。&lt;/li&gt;
  &lt;li&gt;基础软件服务子系统集：提供公共的、通用的软件服务，由事件通知、电话、多媒体、DFX（Design For X） 等子系统组成。&lt;/li&gt;
  &lt;li&gt;增强软件服务子系统集：提供针对不同设备的、差异化的能力增强型软件服务，由智慧屏专有业务、穿戴专有业务、IoT专有业务等子系统组成。&lt;/li&gt;
  &lt;li&gt;硬件服务子系统集：提供硬件服务，由位置服务、生物特征识别、穿戴专有硬件服务、IoT专有硬件服务等子系统组成。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据不同设备形态的部署环境，基础软件服务子系统集、增强软件服务子系统集、硬件服务子系统集内部可以按子系统粒度裁剪，每个子系统内部又可以按功能粒度裁剪。&lt;/p&gt;

&lt;h2 id=&quot;3多内核支持&quot;&gt;3、多内核支持&lt;/h2&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/multi_kernel.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;如上图所示，对于鸿蒙OS，其可以支持各种内核（目前支持Liteos-m,LiteOS-a,Linux）。其通过KAL层对上层提供统一的API接口能力。
我们可以清楚的看到KAL 支持统一是通过支持POSIX和CMSIS（针对arm Cotex-m 的抽象，做到在RTOS层面的尽量统一）对底层内核进行统一封装。做到基于上层API的程序可以在相应的CPU下编译通用，强调只能&lt;strong&gt;编译通用&lt;/strong&gt;。&lt;br /&gt;
其中兼容POSIX的库是Musl-libc。该库是一个轻量级的C标准库，设计作为GNU C library (glibc)、 uClibc或Android Bionic的替代用于嵌入式操作系统和移动设备。它遵循POSIX 2008规格和 C99 标准，采用MIT许可证授权，使用Musl的Linux发行版和项目包括sabotage，bootstrap-linux，LightCube OS等等
然后通过HDF来统一驱动模块的编写调试过程。以此来兼容驱动设备。&lt;/p&gt;

&lt;p&gt;POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准。POSIX标准意在期望获得源代码级别的软件可移植性。换句话说，为一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行。&lt;/p&gt;

&lt;p&gt;CMSIS（Cortex Microcontroller Software Interface Standard）标准，它是ARM同各个微控制器供应商、工具供应商和软件解决方案一起开发的Cortex微控制器软件接口标准。它使得微控制器和软件供应商可以使用一致的软件结构来开发Cortex微控制器的软件。&lt;/p&gt;

&lt;p&gt;CMSIS-RTOS是CMSIS的一部分，它本身是一种API规范，各厂商可以基于CMSIS-RTOS构建自己的实时操作系统（RTOS）。由于基于CMSIS-RTOS的API是标准化的，所以基于这些API开发的应用软件，不需要进行额外的移植开发工作，就可跑在任何支持CMSIS-RTOS的OS上。随着基于CMSIS-RTOS的中间件越来越多，支持CMSIS-RTOS后的OS也会因此获得更多的中间件。&lt;/p&gt;

&lt;h2 id=&quot;4hdf驱动架构&quot;&gt;4、HDF驱动架构&lt;/h2&gt;

&lt;p&gt;OpenHarmony驱动主要部署在内核态，当前主要采用静态链接方式，随内核子系统编译和系统镜像打包。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/hdf_1.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;驱动框架交互流程&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/hdf_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;如上图所示，发布设备服务，即在VFS创建固定的目录或者设备节点，并且通过HDI进行抽象。
下列是相关系统的适配层，让相应的内核支持HDF能力。然后驱动开发工程师通过　drivers_framework　提供的相关框架能力，编写HDF支持的各种驱动，所以HDF统一驱动，是建立在对各种内核集成的HDF　内核支持驱动作为转换层。
所以如果有新的内核需要适配，那么khdf需要根据相应的内核，进行移植，具有较大工作量。&lt;/p&gt;

&lt;p&gt;相关源码目录是：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/hdf_3.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;下图是HDF-Framework层。用于支持HDF统一驱动的开发，加载生效或者卸载。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/hdf_4.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;通过代码中的uhdf/uhdf2可以看到，鸿蒙OS也在尝试将部分驱动放入用户空间，也就是向微内核（或者混合内核）方向演进。但如果是使用Linux内核，通常也可以使用标准的Linux内核驱动模型编写驱动。只是不方便移植到其他的鸿蒙非Linux内核的设备。不过不同的设备，其CPU与外设可能并不相同，分别编写也可能。&lt;/p&gt;

&lt;h1 id=&quot;四软总线分析&quot;&gt;四、软总线分析&lt;/h1&gt;

&lt;p&gt;鸿蒙提供的标准软件总线框架图&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_1.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;主要代码目录如下图，lite和standard有一定差异。针对lite设备，只有发现，认证传输。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;针对标准系统，则添加了组网，并且以client(SDK目录)+Server(core目录)的方式设计。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_3.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;现在开源出来的openharmony方案总体约束为在同一局域网下进行软总线互通。目前开源出来的还是TCP/IP协议建立的局域网。鸿蒙发布会描述的极简协议统一层，我们并没有看到。&lt;/p&gt;

&lt;p&gt;软总线的时序图如下，Module可以看成分布式调度服务等，即其他使用软总线的模块。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_4.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;对于pubulicService 对服务进行发布，实际同时对 软总线进行初始化。（前提是WiFi已经接入了WiFi的局域网）&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_5.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;传输在上面的publicService过程中创建的会话服务 CreateSessionServer（）就是后续进行基于session会话服务的基础。
调用者并不需要关心IP等，只需要使用创建的sessionID 进行通信即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;g_sessionMgr-&amp;gt;serverListenerMap[i] 用于存储session。serverListenerMap结构中，最重要的是listener成员：onSessionOpened，是在会话创建时被回调的函数。&lt;/li&gt;
  &lt;li&gt;onSessionClosed：是在会话结束时被回调的函数。&lt;/li&gt;
  &lt;li&gt;onBytesReceived：是会话的数据到达的回调函数，注册的模块可以通过这个函数接收会话的报文，按照自己的格式进行解析，并执行会话要求的动作。例如：在分布式调度模块中，接收的数据解析后，可能是START_FA的命令。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关的代码：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_6.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;在StartBus()函数会调用StartSession()函数创建基于TCP的socket的会话管理服务。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_7.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;循环监听服务来连接，数据传输。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_8.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;简单总结，就是软总线的传输，是基于COAP发布服务，等待超级终端通过softbus的session进行传输。当client要访问某个设备（可以是远程，可以是本地）的服务，首行连接远程服务的session服务器，并发送数据。远程的session服务通过onBytesRecived接收到数据，并回调给module。而是用module的目的。发送数据调用SendBytes，就可以基于sessionID发送。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_9.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这个过程中，module也好，还是远程client的应用也好，都不需要知道服务在哪个地方，有软件总线进行处理即可，目前服务的发布只支持WiFi下的COAP。&lt;/p&gt;

&lt;p&gt;在代码中可以看到，未来支持的软总线设备有BLE，COAP，USB三种类型。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_10.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;推测软件总线之下应该还有一个针对复杂设备支持多层连接的适配层，以便屏蔽底层差异（当前只开源了WiFi和BT），包括支持上述设备的组网，路由以便构建一张局域网。根据当前的开源代码来看，主要还是基于wifi的局域网连接，其他形式自组网还未看到，但华为在通信这块有很深的功底，这里相信这个目标可以达成。&lt;/p&gt;

&lt;p&gt;基于目前公开的信息，软总线架构推测如下图：&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/softbus_detail_11.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;其中底层连接协议包括以太网、红外线、4G/5G/WiFi、BT、NFC等各种通信能力。目前NFC主要用于华为Card的认证，协助多设备之间的认证。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;通信方式&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;wifi-ap&lt;/td&gt;
      &lt;td&gt;wifi热点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wifi-sta&lt;/td&gt;
      &lt;td&gt;wifi客户端，如手机&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wifi-p2p&lt;/td&gt;
      &lt;td&gt;wifi 无热点的点对点，点对多点的传输&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wifi-aware&lt;/td&gt;
      &lt;td&gt;wifi快速发现协议，支持NAN的自组网。发现阶段是无加密通信，介入后进行加密通信&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BT-BLE&lt;/td&gt;
      &lt;td&gt;可以支持mesh自组网和广播的蓝牙短消息协议&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BT-A2DP&lt;/td&gt;
      &lt;td&gt;蓝牙音频协议 可以与BLE组成双模&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NFC&lt;/td&gt;
      &lt;td&gt;近场通信协议，可以支持数据传输，也可以支持刷卡业务&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;五应用层分析&quot;&gt;五、应用层分析&lt;/h1&gt;

&lt;p&gt;分别编写了鸿蒙的JS及Java应用，结合开放出来的部分源码及文档，对App安装包进行了简单的逆向分析。&lt;/p&gt;

&lt;h2 id=&quot;1开发环境&quot;&gt;&lt;strong&gt;1、开发环境&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;官方IDE DevEco Studio是基于开源的intellij的改造，能够用于本地调试的模拟器只支持JS应用。Java应用截止目前只支持远程模拟器（所谓分布式模拟器）不支持本地模拟器。运行远程模拟器都需要账号密码登录，账号密码需要注册华为ID并实名认证，而实名认证需要上传身份证照片或者银行卡资料，远程调试由于网络和资源分配原因并不流畅，流畅度和画质方面不尽人意，开发体验有点儿糟糕。&lt;/p&gt;

&lt;p&gt;当然如果有真机，也可以使用真机进行开发调试，但华为这里又设了两道门槛，开发鸿蒙应用需要双重签名认证，除了应用本身的签名，还要对应用工程进行签名。这两个签名都需要在鸿蒙开发者网站上注册，生成相应证书后方可安装到真机，步骤相当繁琐。笔者搞这个签名走各种注册流程前后耗时一小时，对开发者不是很友好，好在配置完成后，后续可以直接使用，算是一次性劳动。&lt;/p&gt;

&lt;p&gt;从目前的应用开发流程上看，以后开发鸿蒙应用有可能会对签名服务进行收费，笔者不禁回想起了诺基亚，摩托罗拉时代，J2ME应用证书签名外包给第三方公司，一个应用签名收费2000元否则无法安装到用户手机，搞死生态的事情。生态还没起来，应用开发流程搞的如此复杂，希望华为借鉴这个历史教训。&lt;/p&gt;

&lt;h2 id=&quot;2应用框架&quot;&gt;&lt;strong&gt;2、应用框架&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;鸿蒙应用UI框架有两套，支持Java、JS，IDE里有默认的模板。这两套框架的区别是，Java框架只支持鸿蒙Android系统，JS应用既支持鸿蒙Android系统，也支持鸿蒙嵌入式系统。鸿蒙JS应用在鸿蒙Android上是套了个Android应用的壳，这个壳会构建一个类似小程序的渲染环境，转换为Android的原生控件渲染，下文有展开分析。JS应用相比Java应用，在排版能力，扩展性，兼容性方面存在一定的局限性，更适合做信息展示类的应用。&lt;/p&gt;

&lt;p&gt;对应的也有，Java和JS两套SDK，鸿蒙系统提供的名为Ability的应用框架也分别有Java和JS的实现。应用支持哪些设备，可以在应用的config.json中声明。&lt;/p&gt;

&lt;h2 id=&quot;3应用格式&quot;&gt;3、&lt;strong&gt;应用格式&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;无论是js应用还是java应用，代码最终编译出来包均为hap后缀，这个hap是未经hack的zip格式，可以使用标准的zip解压工具进行解压。&lt;/p&gt;

&lt;p&gt;具体hap包的具体安装使用上，SDK提供命令行工具 hdc&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;&lt;/span&gt;hdc shell am force-stop com.example.myapplication
hdc shell bm uninstall com.example.myapplication
hdc file send ~/DevEcoStudioProjects/MyApplication/entry/build/outputs/hap/debug/entry-debug-unsigned.hap /sdcard/entry-debug-unsigned.hap
hdc shell bm install -p /sdcard/
hdc shell rm -rf /sdcard/xxx
hdc shell am start -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;com.example.myapplication/com.example.myapplication.MainAbilityShellActivity&amp;quot;&lt;/span&gt; -D
hdc app install xxx.hap&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;31java应用&quot;&gt;&lt;strong&gt;3.1、Java应用&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;java应用在开发时依赖以下SDK包，只能用来编译代码，SDK反编译看不到源码，也未开源。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_1.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;根据文件命名，对其功能推测如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;文件名&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ability shell_ide_java.jar&lt;/td&gt;
      &lt;td&gt;Java版的ability应用框架，PageSlice等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ace_ide_java.jar&lt;/td&gt;
      &lt;td&gt;aceUI层框架。ace框架在android上搭建一个类似微信小程序的运行环境，用来运行卡片式应用。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ohos.jar&lt;/td&gt;
      &lt;td&gt;open harmony 基础库，包含rpc等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ohos-annotations.jar&lt;/td&gt;
      &lt;td&gt;java sdk用到的注解&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ohos_intellitv.jar&lt;/td&gt;
      &lt;td&gt;智能电视相关&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ohos_ivi.jar&lt;/td&gt;
      &lt;td&gt;车载相关的代码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ohos_wearable.jar&lt;/td&gt;
      &lt;td&gt;穿戴式应用代码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Java应用解压后的产物如下：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_2.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这些文件的作用如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;文件&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;config.json&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;应用配置文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;assets/*&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;资源文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;classes.dex&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编译后的鸿蒙应用程序代码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;entry_debug_signed_entry.apk&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;安卓的壳，用来运行鸿蒙App即class.dex&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Java应用起来后用MainAbilityShellActivity承载，根据反编译后的壳代码分析，主要由HarmonyApplication完成对ability应用运行环境的初始化。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_3.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Java应用布局文件及显示效果如下图：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_4.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;dump出UI的绘制方式(adb shell uiautomator dump)，可以看到鸿蒙虽然定义了一套应用开发的DSL，但绘制部分还是用Android的UI控件来承载，非自绘UI。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;UTF-8&amp;#39; standalone=&amp;#39;yes&amp;#39; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hierarchy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rotation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,0][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/decor_content_parent&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,0][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/action_bar_container&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,72][1176,240]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/action_bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,72][1176,240]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;entry_MainAbility&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[48,115][528,196]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/content&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,240][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,240][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;你好，世界&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[288,1160][888,1320]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javaApp&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[366,1320][809,1480]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/statusBarBackground&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.View&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.michalliu.myapplication&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,0][1176,72]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hierarchy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由此可以看出，鸿蒙Android版要脱离Android体系难度还比较高，毕竟核心的UI部分非自绘。&lt;/p&gt;

&lt;p&gt;Java应用的运行环境示意图：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_5.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这里理解鸿蒙Android从设计上更类似QT跟Windows的关系，可以理解为在Android操作系统的基础上搭了一套自己的应用程序框架。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_6.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;目前鸿蒙是跟Android深度绑定的，鸿蒙切换操作系统的可能性不是完全没有，但成本相当高，应该说鸿蒙Android的这个设计思路是既然摆脱不了安卓，基于这个前提，那么就充分利用它。&lt;/p&gt;

&lt;h3 id=&quot;32js应用&quot;&gt;&lt;strong&gt;3.2、Js应用&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;从目前已经开源出来的部分上来看基于js开发的应用是一种类似小程序的开发方式，html,js,css首先会编译成jsbundle（编译工具本身未开源），jsbundle的执行不同的鸿蒙系统上有所区别。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Js应用在鸿蒙嵌入式系统上执行分析&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过对openharmony代码分析，在openharmony里Js应用是以自绘的方式渲染，支持的UI组件看起来还比较完善（从源码里看绘制部分似乎参考了部分flutter代码），使用三星的Jerry Js引擎，猜测是挖的三星的人？因为这个Js引擎实在太小众，Google V8他不香吗？&lt;/p&gt;

&lt;p&gt;UI组件框架在 &lt;a href=&quot;https://gitee.com/openharmony/ace_engine_lite&quot;&gt;ace_engine_lite &lt;/a&gt;里，从开源的代码我们看出支持的UI组件还比较丰富，除了常规的控件，还包含列表，动画等复杂控件的实现。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_7.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;ace_engine_lite 负责维护UI组件的生命周期，事件通信，数据更新等，是逻辑层&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_8.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;UI组件的显示层在 &lt;a href=&quot;https://gitee.com/openharmony/graphic_ui&quot;&gt;graphic_ui &lt;/a&gt;工程中，例如下图为UIButton绘制的实现：&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_9.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;目前这个自绘的工程只有嵌入式的的实现，没有Android对应的实现。&lt;/p&gt;

&lt;p&gt;实际在Android工程上，鸿蒙走的并不是自绘的方案，而是类似ReactNative的控件转换，ReactNative采用的是React的语法，而鸿蒙Android采用的是Vue的语法，从国内的开发者生态上来看，这是个正确的选择。&lt;/p&gt;

&lt;p&gt;鸿蒙的这个用C++实现类&lt;a href=&quot;https://vuejs.org/&quot;&gt;VUE&lt;/a&gt;语法，在嵌入式上自绘，Android上控件转换的Js跨平台渲染框架属于原创，可惜的是鸿蒙Android这块并未开源，不能深入研究。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Js应用在鸿蒙Android上执行分析&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Js应用在鸿蒙Android上会转换成Android的UI控件，Js应用解压后的产物如下：&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_10.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这些文件的作用如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;文件&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;config.json&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;应用配置文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;assets/*&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ace框架jsbundle编译结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;classes.dex&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;主要是aceAbility用来执行jsbundle&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;entry_debug_signed_entry.apk&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;安卓的壳，用来运行鸿蒙App即class.dex&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;对于Js应用来说核心逻辑由ohos.aafwk.ace.ability.AceAbility完成jsbundle的加载和运行工作。&lt;/p&gt;

&lt;p&gt;（注意：虽然java应用和js应用在解压后目录结构似乎差不多，文件命名也差不多，但其工作原理完全不同。在Java应用里class.dex已经是鸿蒙应用的真正可执行代码。在js应用里class.dex还是一个壳，这个壳用于打造执行Js应用的运行环境，真正的业务逻辑在app.js里。)&lt;/p&gt;

&lt;p&gt;js应用布局文件及显示效果:&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/app_detail_11.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;dump出UI的绘制方式，可以看到Js应用的UI绘制，在鸿蒙Android上是用Android的UI控件来承载，非自绘UI。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;UTF-8&amp;#39; standalone=&amp;#39;yes&amp;#39; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;hierarchy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rotation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,0][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/decor_content_parent&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,0][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/action_bar_container&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,72][1176,240]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/action_bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,72][1176,240]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;entry_MainAbility&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[48,115][528,196]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:id/content&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.FrameLayout&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,240][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.view.ViewGroup&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[0,240][1176,2328]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;您好 世界&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[331,1173][844,1332]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;node&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Js Application&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resource-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android.widget.TextView&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.example.myapplicationjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content-desc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checkable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focusable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;long-clickable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;[301,1347][874,1452]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/node&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/hierarchy&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;鸿蒙应用层在设计上，基于自己的DSL和应用运行框架，在嵌入式设备上以自绘的方式渲染，在鸿蒙Android上通过适配层转换为Android原生控件渲染。这样的设计优势是减轻了工作量，组件方面可以复用Android的生态，能力会更丰富，毕竟从零再打造一套完整且庞大的UI体系成本太高，体验还不一定有Android做的好，而劣势则是牺牲了可维护性，两套方案要各自独立维护，维护成本较高，另外还可能带来兼容性的问题。从openharmony源码上看，基于自绘方案并没有预留给Android的扩展接口，targetos仅包含linux和liteos两种，因为渲染层架构不同，未来的改成一致的可能性也较低。&lt;/p&gt;

&lt;h1 id=&quot;六总结&quot;&gt;六、总结&lt;/h1&gt;

&lt;p&gt;鸿蒙OS并不定位于对Windows、Android进行替代，而是剑指万物互联时代全场景、多终端的操作系统，与此相对应，鸿蒙OS（及大华为体系）所有的生态布局也将围绕万物互联展开。鸿蒙OS在完成细分场景的拓展与跑马圈地后，鸿蒙OS将完善华为AIoT生态，进一步在智慧城市、车联网（深化）、工业互联网三方面发力推进。中长期来看，鸿蒙OS与华为“云+端”芯片形成强大合力，进军产业物联网。华为优质网络设备是IoT的连接基础，连接获得了大量数据，但只有通过智能分析才能够形成杀手级应用。华为已在云侧和端测拥有昇腾、鲲鹏、麒麟等芯片，具备强大算力，叠加鸿蒙OS高效、灵活的执行力，将培育大量高价值应用。基于近景和远景的生态蓝图，当前鸿蒙OS的发力抓手仍是以移动端为核心的HMS产业链。&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2021/07/01/harmonyos_investigation/eco_system.png&quot; /&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Best way to disable capslock delay on mac</title>
   <link href="http://hellohtml5.com/2019/04/25/best-way-to-disable-capslock-delay-on-mac/"/>
   <updated>2019-04-25T00:00:00+08:00</updated>
   <id>http://hellohtml5.com/2019/04/25/best-way-to-disable-capslock-delay-on-mac</id>
   <content type="html">&lt;p&gt;If you google “capslock delay mac”, you will see a lot of people is suffering by this &lt;strong&gt;Feature&lt;/strong&gt;. And there is no builtin method to turn it off.&lt;/p&gt;

&lt;p&gt;Here is my method I’d like to share. May be this is the simplest one you can ever found on the internet and it is totally free! The solution supports all mac versions in theoretical. In my case, I have Sierra (10.12.6).&lt;/p&gt;

&lt;h2 id=&quot;the-reciepe&quot;&gt;The Reciepe&lt;/h2&gt;

&lt;p&gt;Step 1: Download and install the following software we need.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hammerspoon.org/&quot;&gt;Hammerspoon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: Use Karabiner maps CapsLock key to F19.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:100%;&quot;&gt;&lt;img src=&quot;/2019/04/25/best-way-to-disable-capslock-delay-on-mac/karabiner_map.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Step 3: Edit init.lua under the path &lt;code&gt;~/.hammerspoon&lt;/code&gt;, paste the code below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pressedF19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capslock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hotkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;F19&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressedF19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reload hammerspoon config for changes to take effect.&lt;/p&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:20%;&quot;&gt;&lt;img src=&quot;/2019/04/25/best-way-to-disable-capslock-delay-on-mac/hammerspoon_reload.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;That’s all and we are done.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>图片相似度计算，深入理解DCT变换以及感知哈希</title>
   <link href="http://hellohtml5.com/tech/2018/11/15/DCT-explained/"/>
   <updated>2018-11-15T00:00:00+08:00</updated>
   <id>http://hellohtml5.com/tech/2018/11/15/DCT-explained</id>
   <content type="html">&lt;h2 id=&quot;缘起&quot;&gt;缘起&lt;/h2&gt;
&lt;p&gt;Android上硬件编解码一直是个老大难问题，就解码来说，硬解码本身并不困难，只要按照MediaCodec的流程开发即可。但由于系统碎片化，硬件规格不一致，硬件解码会到黑屏，花屏，绿屏之类的显示问题。为了不招致用户投诉，我们在做视频解码的时候不太敢开启硬件加速，一般会采用保守策略，即以软解为主，优先保证画面正常，但牺牲了性能。&lt;/p&gt;

&lt;p&gt;一般解决这个问题的方案是使用黑(白)机型名单下发配置(如：腾讯视频)，或者暴露开关让用户手动去控制是否走硬件解码(如：bilibili)。
使用机型黑(白)名单有一定的作用，但其问题也显而易见：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;需要浪费大量的人力，精力进行机型测试，去维护，发布名单&lt;/li&gt;
  &lt;li&gt;覆盖度偏低，一般只覆盖TOP机型&lt;/li&gt;
  &lt;li&gt;缺乏时效性，例如新机型上市不能及时跟进&lt;/li&gt;
  &lt;li&gt;不一定准确，因为硬解是否成功，跟视频源也有很大关系，同一个机型可能解这个视频不成功，另外一个视频又是成功的。按照机型”一刀切”的前提是要保证视频规格一致，这样才最健壮。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过开关让用户切换体验太差，尤其是“抖音”之类的短视频App，总不能每个界面加个开关让用户去切换解码器这么深奥的东西吧，从用户角度讲，我为什么要关心这个什么解码器怎么设置，只要视频能正常看就行。&lt;/p&gt;

&lt;p&gt;仔细思考一下，我们其实可以实现自动化的检测，即模拟人工检测流程，把样本视频各软硬解一遍，然后对比他们的解码结果(图片)就能够知道硬解码是否能跑通。解码的流程轻车熟路，那么这里的关键问题就是我们如何进行图片对比？如何量化图片的差异度？&lt;/p&gt;

&lt;h2 id=&quot;图片检索技术&quot;&gt;图片检索技术&lt;/h2&gt;
&lt;p&gt;图片对比其实跟”以图搜图”本质上是同一种技术，通常有几种做法MSE，均值哈希，色彩直方图以及OpenCV里面一些提取图像特征的高级算法，如Sift,Surf等。基于移动端的运行效率，安装包大小，以及需求本身考虑，我们放弃引入OpenCV。MSE 属于逐像素对比，对像素值要求过于严格，太简单粗暴，色彩直方图不太好量化差异度。基于以上考虑，我们选择图像哈希算法，它可以输出汉明距离，方便量化软硬解结果的差异度。&lt;/p&gt;

&lt;p&gt;哈希算法有三种，平均哈希，感知哈希和差异度哈希，基于准确度考虑，我们选择实现较复杂一些的感知哈希算法。另基于性能考虑，我们在Android平台上使用C++实现算法，通过JNI接口给Java调用。Java层输入Android的Bitmap对象，输出为图片指纹，再通过对比指纹的汉明距离，我们即可判断出来解码是否正常。&lt;/p&gt;

&lt;p&gt;Java层接口签名如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bitmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHammingDistance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面分析一下感知哈希实现的方法和背后的原理，使之知其然，知其所以然。&lt;/p&gt;

&lt;h2 id=&quot;图片的构成&quot;&gt;图片的构成&lt;/h2&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/bird_color.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;图一&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/bird_gray_small.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;图二&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;我们知道图片由RGB三原色构成这称之为加色法，我们可以认为图片有三个维度（暂不考虑Alpha）。分析上面两幅图，图一为原图，可以发现图片里蕴含的大部分信息都是低频的，比如天空，绿叶，树枝等，他们很少变化。高频信息是小鸟的眼睛，嘴巴等细节。图二是把图一经过缩放且只保留亮度信息，可以看到这有效的移除了图片的细节，即高频信息，展示了图片的低频部分。图片的低频部分决定了图片的大体结构，高频部分则完善了图片的细节。我们在对比图片是否相似的时候，其实更关注的是中低频部分的差异度。&lt;/p&gt;

&lt;p&gt;在实践中，我们可以把图片从RGB转换为YCbCr格式，只提取Y的部分参与计算，实现降维，以减少运算量。再把图片缩放到32*32大小，丢弃掉大部分高频信息。由于进行了降维和缩放，后续步骤我们的运算量已大大减少。
把图片从空域转换到频域，我们需要使用DCT（二维离散余弦变换）。DCT也是JPEG以及H264压缩算法的核心部分，感兴趣的可以继续深入了解视频压缩算法的相关研究。&lt;/p&gt;

&lt;h2 id=&quot;感知哈希与dct离散余弦变换&quot;&gt;感知哈希与DCT（离散余弦变换）&lt;/h2&gt;
&lt;p&gt;为了让大家深入了解背后的原理，这里打算展开介绍一下DCT，以及它为什么能检测出来图片的相似程度。本文恐怕是网络上能找到讲解DCT最详细的一篇文章了，如果你对背后的原理不感兴趣，也可以直接跳过。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;从空域到频域&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;DCT由如下的公式定义，N和M为矩阵的行数和列数
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{equation}
F(u, v) = \left (\frac{2}{N} \right )^{\frac{1}{2}} \left (\frac{2}{M} \right )^{\frac{1}{2}} C(u)C(v) \sum_{i=0}^{N-1}\sum_{j=0}^{M-1} f(i,j)cos\left [\frac{\left(2i+1\right)u\pi}{2N} \right ]cos\left [\frac{\left(2j+1\right)v\pi}{2N} \right ]
\end{equation}\\
C(\varepsilon) =
\begin{cases}
\frac{1}{\sqrt{2}}&amp; \text{for}\ \varepsilon = 0\\
1&amp; \varepsilon&gt;0
\end{cases}\\ %]]&gt;&lt;/script&gt;
其中：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;u,v = 离散频率变量(0,1,2…7)&lt;/li&gt;
  &lt;li&gt;f(i,j) = 图像在i行j列的像素值&lt;/li&gt;
  &lt;li&gt;F(u,v) = DCT结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们先研究一个最简单的场景，假设图片像素值如下：
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
1&amp;3\\2&amp;0
\end{bmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;当N和M都为2时，上述公式可简化为：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation}
F(u,v) = C(u)C(v) \sum_{i=0}^{1}\sum_{j=0}^{1} f(i,j)cos\left [\frac{\left(2i+1\right)u\pi}{4} \right] cos\left [\frac{\left(2j+1\right)v\pi}{4} \right]

\end{equation}&lt;/script&gt;

&lt;p&gt;下面我们来计算二维DCT&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
F(0,0) &amp;= \frac{1}{2}\sum_{i=0}^{1}\sum_{j=0}^1f(i,j)\\
&amp;=\frac{1}{2}\left [1+3+2+0\right]\\
&amp;=3\\
F(0,1) &amp;= \frac{1}{\sqrt{2}}\sum_{i=0}^{1}\sum_{j=0}^1f(i,j)*cos(0)*cos\left(\frac{\left(2j+1\right)\pi}{4}\right)\\
&amp;= \frac{1}{\sqrt{2}}\sum_{i=0}^{1}\sum_{j=0}^1f(i,j)*1*cos\left(\frac{\left(2j+1\right)\pi}{4}\right)\\
&amp;= \frac{1}{\sqrt{2}}\left[1*cos(\frac{\pi}{4})+2*cos(\frac{\pi}{4})+3*cos(\frac{3\pi}{4})+0\right]\\
&amp;=0\\
F(1,0) &amp;= \frac{1}{\sqrt{2}}\sum_{i=0}^{1}\sum_{j=0}^1f(i,j)*cos\left(\frac{\left(2i+1\right)\pi}{4}\right)*cos(0)\\
&amp;= \frac{1}{\sqrt{2}}\left[1*cos(\frac{\pi}{4})+2*cos(\frac{3\pi}{4})+3*cos(\frac{\pi}{4})+0\right]\\
&amp;=1\\
F(1,1) &amp;= \sum_{i=0}^{1}\sum_{j=0}^1f(i,j)*cos\left(\frac{\left(2i+1\right)\pi}{4}\right)*cos\left(\frac{\left(2j+1\right)\pi}{4}\right)\\
&amp;= 1*cos(\frac{\pi}{4})*cos(\frac{\pi}{4})+2*cos(\frac{3\pi}{4})*cos(\frac{\pi}{4})+3*cos(\frac{\pi}{4})*cos(\frac{3\pi}{4})+0\\
&amp;=-2\\
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;即，结果是：
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{bmatrix}
3&amp;0\\1&amp;-2
\end{bmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;用Python的相关模块可以交叉验证我们的计算结果：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.fftpack&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ortho&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ortho&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在实践上，上述方式的计算效率不高，更加简便的计算方式是使用DCT矩阵：
&lt;!--https://www.zybuluo.com/knight/note/96093--&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
T_{i,j}=\left\{
\begin{array}{lcr}
\frac{1}{\sqrt{N}}       &amp; {if\ i=0}\\
\sqrt{\frac{2}{N}}cos\left[\frac{(2j+1)i\pi}{2N}\right]   &amp; {if\ i&gt;0}\\
\end{array} \right. %]]&gt;&lt;/script&gt;

&lt;p&gt;若N取2，得到DCT矩阵
&lt;!--https://www.cnblogs.com/houkai/p/3399646.html--&gt;
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{vmatrix}
\frac{1}{\sqrt{2}} &amp; \frac{1}{\sqrt{2}} \\
cos(\frac{\pi}{4}) &amp; cos(\frac{3\pi}{4})
\end{vmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;若N取8，得到的矩阵是这样的&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_matrix8.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;8*8 DCT矩阵&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;其中i=0时，即第0行，我们称为DC分量或直流分量，i=1-7 我们称为AC分量或交流分量，用图表形式表示如下&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_1.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=1&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_2.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=2&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_3.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=3&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_4.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=4&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_5.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=5&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_6.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=6&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:45%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_row_7.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;i=7&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;有这样一个矩阵的话，我们再进行DCT变换就非常简单了：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D=TMT^T&lt;/script&gt;

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;T = DCT矩阵&lt;/li&gt;
  &lt;li&gt;M = 图像数据&lt;/li&gt;
  &lt;li&gt;D = DCT结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是对一张8*8图片应用DCT变换得到的矩阵结果：&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:60%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_output8.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;这个矩阵最左上角是低频信息，右下角是高频信息。有个神奇的东西叫基准样式。&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:60%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/dct_basis_pattern8.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;信不信由你，任意一张8*8的图，都可以由标准图中的的小图以一定比例叠加而合成，而每个小图的权重，由DCT变换得到的矩阵决定，是不是很有意思。DCT变换后左上角一般是比较大的数字，而右下角一般是比较小的数字，这暗含了图片中低频信息占的比重较多，因此我们在做图片或者视频编码压缩的时候，正是通过量化舍弃右下角的高频信息，来实现信息的压缩。&lt;/p&gt;

&lt;h2 id=&quot;图片差异度&quot;&gt;图片差异度&lt;/h2&gt;
&lt;p&gt;我们在对比图片差异的时候，正是通过对比频域信息来实现的。在我们的实现中，首先把软硬件解码后的图片转成YCbCr格式，只提取其中的Y，实现降维，再把图片缩放到32*32大小，进一步减少运算量，同时舍弃了一部分高频信息。再应用32*32的DCT把图片转换到频域，从频域矩阵中提取8*8中低频区域的系数，计算算数平均值。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D = \frac{\sum_{i=2}^{9}\sum_{j=2}^{9}f(i,j)}{64}&lt;/script&gt;

&lt;p&gt;矩阵中的每个值再与D比较，大于D计1，小于D计0，按位存储，我们即可得到一个图片指纹。通过计算两个图片指纹的差异，我们就可以得到可以量化图片差异度的数字。
当差异为0时，我们认为两张图片完全一样，差异越大，表明图片越不相似。对于解码出现绿屏，花屏的情况，我们可以有效的检测出来。&lt;/p&gt;

&lt;p&gt;绿屏案例，相似度24:&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:40%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/case1.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;hash:89969d7f616c8199&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:40%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/case2.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;hash:17169efefecc8040&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;花屏案例，相似度20:&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:40%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/case3.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;hash:9ab6bf6441491b99&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;image-wrapper&quot; style=&quot;width:40%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/case4.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;hash:9ea72d6019e61b1e&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;检测Demo截图:&lt;/p&gt;
&lt;div class=&quot;image-wrapper&quot; style=&quot;width:40%;&quot;&gt;&lt;img src=&quot;/tech/2018/11/15/DCT-explained/demo.png&quot; /&gt;&lt;p class=&quot;image-caption&quot;&gt;[&amp;nbsp;&lt;span&gt;Demo截图&amp;nbsp;&lt;/span&gt;]&lt;/p&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>在Angularjs里正确$apply的方法</title>
   <link href="http://hellohtml5.com/tech/2014/10/16/how-angularjs-apply-works/"/>
   <updated>2014-10-16T00:00:00+08:00</updated>
   <id>http://hellohtml5.com/tech/2014/10/16/how-angularjs-apply-works</id>
   <content type="html">&lt;h1 id=&quot;数据视图绑定原理&quot;&gt;数据视图绑定原理&lt;/h1&gt;
&lt;p&gt;我们都知道Angularjs的数据-视图绑定功能，如下面的这个视图&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Ctrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  {{message}}
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果我们想在隔段时间后更新message，那么我们向controller添加如下代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;update hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们期待两秒后message会更新，但实际情况并非如此。这与Angularjs数据绑定的实现机制有关系。其实要实现数据绑定，也就是得到数据改变的通知，最容易想到的有两种思路。&lt;/p&gt;

&lt;h2 id=&quot;原生api&quot;&gt;原生API&lt;/h2&gt;
&lt;p&gt;即Object.watch(Mozilla)，Object.observe。 这个方法适用于最新的js解释器，在V8下可以写如下代码，观察对象的属性的变化。优点是性能最好，所有对象都能够实现监控，缺点是兼容性问题。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; changed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//输出&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;x changed&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;在回调函数中监控&quot;&gt;在回调函数中监控&lt;/h2&gt;

&lt;p&gt;这个很好理解，我们要求调用者写代码时&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;要写成&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;那么 a 就是这么个对象&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; changed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们在a的set方法中埋一个钩子，就可以监控到a的属性改变，这个方法的优点是容易实现，也很容易理解。缺点也显而易见。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它依赖于约定。如果有人写了 a.y=”5”; 它是监控不到这个变化的&lt;/li&gt;
  &lt;li&gt;不是所有的对象都支持绑定，只有一些特殊内置了set方法的对象，才能支持绑定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;采用这种实现方式的有 &lt;a href=&quot;http://emberjs.org&quot;&gt;EmberJS&lt;/a&gt; 和 &lt;a href=&quot;http://knockoutjs.org/&quot;&gt;KnockoutJS&lt;/a&gt;。那就不难理解以下两条规则了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Emberjs里，所有observable的对象必须用Ember.Object.create这个工厂方法创建&lt;/li&gt;
  &lt;li&gt;在Knockout里，observable对象须用 ko.observable 装饰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外一个需要关注的问题是Model的触发视图的更新时机，在Knockout官网上里有如下例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;First name: &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text: firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;todo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Last name: &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text: lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;todo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Fullname: &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text: fullName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;todo&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;click: capitalizeLastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This is a simple *viewmodel* - JavaScript that defines the data and behavior of your UI&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bertington&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;capitalizeLastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bang&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Activates knockout.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ko&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyBindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当我们点击test按钮时，capitalizeLastName 这个函数会就会一行一行的执行，注意我们的debugger语句，当 this.firstName(“bang”); 执行完毕后我们中断了程序。这个时候观察视图，发现视图中的firstName已经变成bang了。我们继续程序执行this.lastName(currentVal.toUpperCase()); 这句执行完毕时，lastName才被全部大写。这似乎没有什么神奇的地方。我们注意到使用这种方式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视图更新次数频繁，每次Model的改变都会触发视图的更新。&lt;strong&gt;它更关注对象什么时候发生了变化&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据一致性有保证&lt;/strong&gt;，例如我在上面对firstName赋值，下面的代码要用到这个值的时候，已经知道firstName的最新的值是什么，调用 this.firstName() 即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只有理解了这两点，才能继续往下看，理解Angular的与众不同。&lt;/p&gt;

&lt;h2 id=&quot;angular的方式&quot;&gt;Angular的方式&lt;/h2&gt;

&lt;p&gt;Angular看这个问题的角度很新颖，Angular的绑定不用制造特殊对象，任何对象它都支持绑定，它的原理大致是这样的。&lt;/p&gt;

&lt;p&gt;我们发现网页上界面刷新操作都对应一个具体的事件。例如最常用的，点击造成界面刷新，定时器到时触发刷新，AJAX请求返回触发刷新等。因此，Angular封装了一些常用的操作函数ng-click, $timeout,$http等。异步的操作采用Promise封装。当这个Promise处于complete状态，我们就触发一次$digest操作(同步的方法视为马上complete)。$digest的目的就在于检查被监控的对象是否发生了变化。&lt;/p&gt;

&lt;p&gt;这里我们看到Angularjs跟上面方式的区别，&lt;strong&gt;Angular不关注对象什么时候发生了变化，关注的是事件引起了那些变化&lt;/strong&gt;。在该事件结束后，统一刷新界面。这样做的好处是不会产生过多的视图渲染，假设我们要做一个聊天消息列表，我们可以写如下代码，而不用担心聊天界面被渲染两次，毕竟每次渲染需要大量的CPU计算，给用户的感觉会“卡”。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 以下代码在某个$http回调中&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newMsgList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//第一次赋值&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgListLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msgListLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msgListLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 第二次赋值，只保留200条最新消息&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 对msgList的操作不会引起View的重绘&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们虽然对msgList进行了两次赋值，但是真正的渲染只会在$http结束后渲染一次。
下面我们结合代码更加详细的分析一下这个过程。
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/sorise/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
在视图中，我们声明了两个watcher，a和b。我们这时点击test按钮，我们可以想象代码中最后会执行$scope.$digest()方法。为了证明它真的是这样工作的，我们打开调试器，当代码中断在debugger语句时，$scope.a已经发生了变化，但是视图并未立即更新。而是在xxClick执行完毕后更新（实际上是在$digest后更新，而$digest是由本文的主角$apply触发）。&lt;/p&gt;

&lt;p&gt;然后请大家想两个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们知道具体什么时候a发生了变化吗？&lt;a href=&quot;javascript:void(0);&quot; data-display=&quot;.answser1&quot;&gt;显示答案&lt;/a&gt;
 &lt;span class=&quot;answser1&quot;&gt;我们不知道精确的时间，但是我们知道是在xxClick后我们通过检查与旧值的对比，发现a发生了变化。在knockout中我们可以知道一个对象改变的精确时间，在Angular里，我们不知道。除非你刻意写代码，在每个改变a的地方打个时间戳。&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们是怎么知道我们监控了那些对象？&lt;a href=&quot;javascript:void(0);&quot; data-display=&quot;.answser2&quot;&gt;显示答案&lt;/a&gt;
 &lt;span class=&quot;answser2&quot;&gt;有两种办法:&lt;/span&gt;
 &lt;span class=&quot;answser2&quot;&gt;1. 我们看到$scope下有a,b,c三个属性，那么我们是否需要监控a,b,c三个值得变化呢，要解答这个问题要看View，在View中我们只引用了a和b，并没有涉及到c，所以只有a和b两个watcher。&lt;/span&gt;
 &lt;span class=&quot;answser2&quot;&gt;2. 使用$scope.$watch(“c”, function () {}) 这样我们通过代码的方式手工增加了一个watcher。&lt;/span&gt;
 &lt;span class=&quot;answser2&quot;&gt;注：实际上，我们监控的对象也可以是一个表达式，例如，但是它们本质上是一样的，只要a发生了变化，就将这个表达式重新计算，计算结果更新到视图上。&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们看到Angularjs的实现方法严格意义上讲，应该归类于第二种，是基于函数的回调检查变化，但是它从宏观角度着眼，不纠结于单个属性的变化，而是关注事件触发后，我要关注的对象都发生了什么改变。&lt;/p&gt;

&lt;p&gt;但是，这样带来一个数据一致性的问题。当view中有多个watcher时，a的变化可能会引起b的变化，而watcher监听器的执行总会有个先后顺序，在单个$digets循环中，如果b的监听器先于a执行，那么a变化之后，那么b在本次$digest中就感知不到a的变化。更麻烦的时，a的变化有可能引起e的变化，e的变化又改变了b，那么怎么解决这个问题。&lt;/p&gt;

&lt;p&gt;Angular的解决方式是，在单次$digest结束后，如果watch的expression的值计算以后，发现发生了变化就标记本次$digest的结果为dirty，再执行一次$digest，如果结果还是dirty 那就再执行一次，直到dirty为false为止。这就是Angular中&lt;strong&gt;dirty-check（脏检查）&lt;/strong&gt;的来历。Angular中对这个检查次数有个10的上限，如果$digest超过10次，会抛异常。我们可以看出来Angularjs里&lt;strong&gt;双向绑定&lt;/strong&gt;并不神秘，而且只是一种概念，从Angular开发者的角度来看，根本不存在所谓的&lt;strong&gt;双向绑定&lt;/strong&gt;，只是不同的事件在触发$digest而已。&lt;/p&gt;

&lt;p&gt;注：我们也可以把a也理解为一个expression，即(a)&lt;/p&gt;

&lt;h1 id=&quot;angular里的数据视图绑定&quot;&gt;Angular里的数据视图绑定&lt;/h1&gt;
&lt;p&gt;通过上文，我们了解了Angular中model到view的data binding的实现，现在回到开头的问题，在Angular中怎么正确的进行视图更新。通过上面的原理我们知道，其实只需要触发$digest就可以了，我么可以通过调用$scope.$digest();实现界面刷新。
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/lepoya/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
但是直接$digest是有一定风险的，因为$digest是会抛异常（还记得那个10次限制吗）。所以我们一般直接调用$apply，我们看Angular里$apply的源码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;beginPhase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$apply&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;$exceptionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;clearPhase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$digest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$exceptionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们看到$apply可以触发$digest，并且捕捉了异常，因此有下面代码达到同样的效果
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/sasudo/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
注意我们使用$apply触发刷新，这样相对来说就比较安全了，它会处理$digest的异常。
我们注意到，$apply还可以接受一个js expression，因此下面这种写法也是可以的
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/cicuv/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
或者
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/zulumu/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
它们的区别就是，&lt;strong&gt;在$apply里的expression异常会被Angularjs捕捉处理，不会导致整个Angular应用的崩溃&lt;/strong&gt;，这一点儿对一个webapp来说是至关重要的。
但是这样做有时候还会有问题，有时候我们会遇到这个错误 &lt;strong&gt;“$digest already in progress”&lt;/strong&gt; 这是怎么回事呢。&lt;/p&gt;

&lt;h1 id=&quot;处理digest错误&quot;&gt;处理$digest错误&lt;/h1&gt;
&lt;p&gt;Angular里有许多内置的directive，这些directive会自动的执行$apply，比如$timeout，$http这些常用的模块
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/xoxoti/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
在这些内置的directive里，我们不需要手动$apply，Angular会自动帮我们做。我们的上述代码，实际上相当于如下&lt;strong&gt;想象的&lt;/strong&gt;代码(注意注释的代码)， 使用Promise很容易实现。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*.always(function () { $scope.$apply(); });*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在实际项目中，我们经常需要使用外部库jQuery等与Angular结合，以提高性能，或者方便的实现Angular中没有的功能。
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/piromo/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
updateMsg是一个公共方法，有可能在Angular的directive里调用，也有可能在jquery的回调函数里调用，$http请求完成后会执行我们代码中的$apply()，之前也说过$http方法是会自动$apply的，所以等于是&lt;strong&gt;在$apply里又执行了$apply&lt;/strong&gt;，发生状态错误。所以就会出现&lt;strong&gt;“$digest already in progress”&lt;/strong&gt; 的错误，但在jquery的click回调里没有这个问题。 这种场景在Angular和jquery混用的时候是非常常见的。那么我们如何简单方便的解决这个问题呢，答案非常简单:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateMsgWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateMsgWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#test&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateMsgWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;相信我啰嗦了这么多，大家都明白为什么这样做能解决问题了。这样做的好处是没有额外的代码，并且兼容angular和Non-Angular的情况。流行的还有一种方法，过于geek，不推荐使用，仅供参考:
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/sohuli/1/embed?js,output&quot;&gt;JS Bin&lt;/a&gt;
$$phase保存$digest状态机的当前状态。&lt;/p&gt;

&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 

</feed>
